generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  resetToken    String?
  resetTokenExp DateTime?
  language      String?   @default("en")
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  products      Product[]
  sessions      Session[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  depth       Float?
  diameter    Float?
  height      Float?
  weight      Float?
  width       Float?
  colors      String[]
  images      Image[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  createdBy   User        @relation(fields: [userId], references: [id])
}

model Image {
  id        String    @id @default(cuid())
  url       String
  productId String
  createdAt DateTime  @default(now())
  type      MediaType @default(IMAGE)
  order     Int       @default(0)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  featured  Boolean   @default(false)
  order     Int       @default(0)
  thumbnail String?
  products  Product[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  addressId   String?
  totalAmount Float
  address     Address?    @relation(fields: [addressId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
  items       OrderItem[]
  refunds     Refund[]
  
  // Guest order fields
  guestEmail      String?
  guestName       String?
  guestPhone      String?
  guestAddress    Json? // Store guest address as JSON
  isGuestOrder    Boolean @default(false)
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Refund {
  id          String   @id @default(cuid())
  orderId     String
  amount      Float
  reason      String
  method      String
  status      String
  processedBy String
  processedAt DateTime @default(now())
  notes       String?
  order       Order    @relation(fields: [orderId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id         String   @id @default(cuid())
  userId     String?
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  country    String
  phone      String
  user       User?    @relation(fields: [userId], references: [id])
  orders     Order[]
}

model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  updatedBy String?
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
}
