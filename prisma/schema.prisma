// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  orders        Order[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  resetToken    String?
  resetTokenExp DateTime?
  language      String?   @default("en")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  images      Image[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
  // Size specifications (optional)
  height      Float?    // in centimeters
  width       Float?    // in centimeters
  depth       Float?    // in centimeters
  diameter    Float?    // in centimeters
  weight      Float?    // in grams
  // Color information
  colors      String[]  // Array of colors for the product
}

model Image {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  type      MediaType @default(IMAGE)
  order     Int      @default(0)
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  thumbnail String?   // URL to category thumbnail image
  featured  Boolean   @default(false) // Whether category is featured on homepage
  order     Int       @default(0) // Order for featured categories
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  address      Address     @relation(fields: [addressId], references: [id])
  addressId    String
  items        OrderItem[]
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  refunds      Refund[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Refund {
  id           String      @id @default(cuid())
  order        Order       @relation(fields: [orderId], references: [id])
  orderId      String
  amount       Float
  reason       String
  method       String      // AUTOMATIC, MANUAL, BANK_TRANSFER, etc.
  status       String      // PENDING, PROCESSED, FAILED
  processedBy  String      // User ID who processed the refund
  processedAt  DateTime    @default(now())
  notes        String?     // Additional notes
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  line1       String
  line2       String?
  city        String
  state       String?
  postalCode  String
  country     String
  phone       String   // Add phone number for contact
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  updatedBy String? // User ID who made the change
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
} 